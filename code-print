DEPARTMENT ROUTER

module.exports = function(app) {


	var departmentController = require('../controllers/department-controller');

	//:todo decide which method is better - grocery version or controller version
	router.get('/department/:id/:groceryId',

	 departmentController.getDepartment);


	router.get('/departments/show/:groceryId',

	 departmentController.departmentsList);


	// :todo make it work
	router.get('/hide/department/:id/:groceryId', function(req, res, next) {
		var departmentId = req.params.id;
		var groceryId = req.params.groceryId;

		var Grocery   = app.models.Grocery;

		var options = {
	      // type: 'hide',
	      // field: 'hideThisIds',
	      groceryId: groceryId,
	      secondArray: [ departmentId ]
	    };


		Grocery.addDepartment(options);

	});


	router.get('/show/department/:id/:groceryId', function(req, res, next) {
      var departmentId = req.params.id;
	  var groceryId = req.params.groceryId;

	  var Grocery   = app.models.Grocery;

	  var options = {
	      // type: 'show',
	      // field: 'hideThisIds',
	    groceryId: groceryId,
	    secondArray: [ departmentId ]
	  };


	  Grocery.removeDepartment(options);

	});


  // :todo test this
  // Not working i think
	router.get('/show/all/:groceryId', function(req, res, next) {
		var groceryId = req.params.groceryId;
		var Grocery   = app.models.Grocery;
		var options = {
	      groceryId: groceryId
	    };

		Grocery.showAllDepartments(options);

	});


	// :todo make it work  or delete?
    // 	1) we got all information from grocery and check
    // 	2) is this departmentId isset at hide array
    //  3) depending on result we've add or remove it from it
// :todo this function is suck.

	router.get('/visibility/department/:id/:groceryId', function(req, res, next) {
	  var departmentId = req.params.id;
	  var groceryId = req.params.groceryId;
	  var Department   = app.models.Department;
	  var Grocery      = app.models.Grocery;

	  Grocery.findById(groceryId, {

		}, function(err, grocery) {

			var g = grocery.toJSON();

			if( !grocery.hideThisIds ){ console.log('empy'); }

			let arr = _.map(grocery.hideThisIds, item => item.toString());

			var flag = _.contains(arr, departmentId);



			if( !flag ){
				//add to hide
				var options = {
			      groceryId: groceryId,
			      secondArray: [departmentId]
			    };

				Grocery.addDepartment(options);

			} else {
				//remove from hide
				var options = {
			      groceryId: groceryId,
			      secondArray: [departmentId]
			    };

				Grocery.removeDepartment(options);

			}

		});

	  res.redirect('/view/grocery/' + groceryId);

	});




	router.get('/remove/department/:id/:groceryId', departmentController.deleteDepartment);

---
FAVORITES ROUTER

	var router  = app.loopback.Router();

  router.get('/favorites',  function(req, res, next) {

    var User = app.models.user;
    User.listFavorites(req.user.id, function(error, response){
      // console.log(response);

      res.render('pages/favorites', {
        data: ( response.length > 0 ) ? response : false, // :todo change names, punk!
        // url: req.url,
        messages: {}
      });

    })

  });


  router.post('/delete/favorites/',
 function(req, res, next) {


    var ingredients = req.body.ingredients;
    var userId = req.user.id;
    var User   = app.models.user;


    // this is a duplicated function from Grocery :todo think about it, real talk
    var options = {
      type  : 'remove',
      field : 'favs',
      userId: userId,
      secondArray: ingredients
    };

    // console.log(options);
    User.proceed(options);

    res.redirect('/favorites');



  });

  //:todo fix delete or finish this
  // router.post('/add/fav', function(req, res, next) {

  //   console.log(req.body);
  //   console.log(req.params);

  // });

  router.get('/add/fav2/:ingredientId',


  router.get('/add/fav2/clear', function(req, res, next) {

  });


	app.use(router);

};

----
'use strict';

var request        = require('request');
var ensureLoggedIn = require('connect-ensure-login').ensureLoggedIn;

module.exports = function(app) {

	var router  = app.loopback.Router();

  router.get('/favorites', ensureLoggedIn('/auth/account'), function(req, res, next) {

    var User = app.models.user;
    User.listFavorites(req.user.id, function(error, response){
      // console.log(response);

      res.render('pages/favorites', {
        data: ( response.length > 0 ) ? response : false, // :todo change names, punk!
        // url: req.url,
        messages: {}
      });

    })

  });


  router.post('/delete/favorites/',
    ensureLoggedIn('/auth/account'), function(req, res, next) {


    var ingredients = req.body.ingredients;
    var userId = req.user.id;
    var User   = app.models.user;


    // this is a duplicated function from Grocery :todo think about it, real talk
    var options = {
      type  : 'remove',
      field : 'favs',
      userId: userId,
      secondArray: ingredients
    };

    // console.log(options);
    User.proceed(options);

    res.redirect('/favorites');

    // User.getCurrentUserWithFavorites(req.user.id, function(err, model) {

    //   var data = model.toJSON();
    //   console.log(data.favorites);

    //   if( !data.favorites ){ return true; } //:todo test this

    //   let forDeletion = [ req.favoriteId ];

    //   let arr = data.favorites;

    //   arr = arr.filter(item => !forDeletion.includes(item))
    //   // !!! Read below about array.includes(...) support !!!

    //   console.log(arr);

    //   model.updateAttribute('favs', arr);
    //   console.log(model);

    // })

  });

  //:todo fix delete or finish this
  // router.post('/add/fav', function(req, res, next) {

  //   console.log(req.body);
  //   console.log(req.params);

  // });

  router.get('/add/fav2/:ingredientId',
    ensureLoggedIn('/auth/account'),
    function(req, res, next) {

    var ingredientId = req.params.ingredientId;
    var userId       = req.user.id;

    // console.log( ingredientId );
    // console.log( userId );

    var User = app.models.user;

    var Ingredient = app.models.Ingredient;

    Ingredient.findById(ingredientId, {}, function(err, model){

      // console.log(model);
      if( model ){

        var options = {
          type  : 'add',
          field : 'favs',
          userId: userId,
          secondArray: [model.id]
        };
        // this is a duplicated function from Grocery :todo think about it, real talk
        User.proceed(options);


      }
       res.redirect('/auth/account');

    });








  });

  router.get('/add/fav2/clear', function(req, res, next) {
    var userId = req.user.id;

    // console.log( ingredientId );
    // console.log( userId );
    var User   = app.models.user;

    // this is a duplicated function from Grocery :todo think about it, real talk
    var options = {
      type  : 'clear',
      field : 'favs',
      userId: userId,
    };
    User.proceed(options);

    res.redirect('/auth/account');

  });


	app.use(router);

};

----
GROCERY ROUTER

 // :todo add relations and display whole information about
 // :todo make it more protected from view
  router.get('/view/grocery/:groceryId',

    groceryController.viewGrocery);


  // :todo Handle this later. just want to fix issue fast.
  // This is a clone of /view/grocery functionality for reviewing
  // as not logged in user a data from ultimate grocery list
  // for simplifying things i'll just duplicate a lot stuff
  // and make it work as quicker as i can
  router.get('/view/ultimategrocery/',
    groceryController.viewUltimateGrocery);

 router.get('/view/grocery/hidden/:groceryId',

  function(req, res, next){
    var Grocery   = app.models.Grocery;
    var groceryId = req.params.groceryId;

    // only hidden departments will be diplsayed
    Grocery.fetchById2(groceryId, function(err, response){

    });

  });



  router.get('/auth/attach-grocery-to-user/:groceryId'});


 router.get('/remove/grocery/:groceryId',  groceryController.removeGrocery);


  router.get('/clone/:groceryId', groceryController.cloneGrocery);

  router.post('/cloneform', groceryController.postCloneForm);

  router.get('/afterclone', groceryController.justRedirect);

  router.get('/clone-grocery/:groceryId', groceryController.getCloneForm);



// :todo finish
 router.get('create-new-grocery',

  groceryController.createNewGrocery);


// :todo finish Not used functionality right now
 router.get('/view/groceries',
  function(req, res, next){
 });


 // Change Grocery Name functionality

 router.get('/change/grocery/name/:groceryId',

  groceryController.changeName);


  // Update grocery list name
  router.post('/update/name',
    groceryController.postUpdateName);


  // Shopping part, i.e. TODO list
  router.get('/shopping/:groceryId/:departmentId',
    groceryController.shopping);

  //@todo find out why i add a copy of previous method/controller action
  // router.get('/shopping2/:groceryId/:departmentId',
  //   groceryController.shopping2);

  app.use(router);

};

--------
PURCHASED ROUTER
  // move this to remote methods :todo
  router.post('/togglepurchased', function(req, res, next){
  	var Grocery        = app.models.Grocery;
    var ingredients    = req.body.ingredients;
   	var groceryId      = req.body.groceryId;

    if(req.body.type == 'add'){

      Grocery.addPurchased(options);
      res.json('success');

    } else {

      Grocery.removePurchased(options);
      res.json('success');

    }

  });


  router.post('/clearpurchased', function(req, res, next){
    Grocery.cleanPurchased({});


  });



  // used for ajax call from todo list
  // :todo maybe move to shopping controller, for easy keeping all things in one place?
  router.post('/unattach', function(req, res, next){
    var Grocery        = app.models.Grocery;
    var Ingredient     = app.models.Ingredient;

    var ingredients    = req.body.ingredients;
    var groceryId      = req.body.groceryId;



    Grocery.removePurchased(req.body);

    Grocery.removeIngredient(req.body);

    Ingredient.find({
      where : {
        id : { inq : req.body.ingredients }
      }
    }, function(err, models){

      // console.log(models);

      _.map(models, function(model){



        if(model.custom == true){

          // model.updateAttribute('departmentId', false);
          model.destroy();

        }


      });


      res.json('success');

    });

    // res.json('success');
    // :todo add removing ingredient from whole database

  });



  // :todo I think we don't use this method anymore
  // :todo maybe remove this functionality. it's enabled only for old
  // fashioned add to purchased indredient by click on button
  // router.get('/remove-from-purchased/:groceryId/:ingId', function(req, res, next){
  //   Grocery.removePurchased(options);

};

=================
INGREDIENTS ROUTER
module.exports = function(app) {
	var router  = app.loopback.Router();

	// var request = require('request');

	// :todo this must be a remote method
	router.get('/add/ing/:id/:groceryId', function(req, res, next){
		var ingredientId = req.params.id;
		var groceryId    = req.params.groceryId;

		var Grocery   = app.models.Grocery;


		Grocery.addIngredient(options);

	});






	// Ing change Department ID
	router.get('/changedepartmentid/:id/:departmentId', function(req, res, next){
		var Ingredient   = app.models.Ingredient;
		var ingredientId = req.params.id;
		var departmentId = req.params.departmentId;


		Ingredient.findById(ingredientId, function(err, model){
			model.updateAttribute('departmentId', departmentId);
		})
	});



    // :todo I think this can be just a remote method.
    // if this will works fine - it'll reduse some place in routes.

    // :todo extend this method. make it async

	// Ing change name
	router.post('/changename/', async function(req, res, next){
		// var Ingredient   = app.models.Ingredient;
		var ingredientId = req.body.id;

		var name         = req.body.name;
		// var departmentId = req.body.departmentId;
		// var groceryId    = req.body.groceryId;

	// :todo change this and remoe asycn from this file
	  let ingredient
	  let response
	  try {
	  	var Ingredient   = app.models.Ingredient;
	     // var Grocery   = app.models.Grocery;
	     // grocery = await Grocery.fetchById(groceryId);
	     ingredient  = await Ingredient.findById(ingredientId);

	     // console.log(ingredient);
	     // response = Grocery.convertCollectionData(grocery);
	     // console.log(response);

	  } catch (e) {
	     Raven.captureException(e);
	    //this will eventually be handled by your error handling middleware
	    next(e)
	  }

	  ingredient.updateAttribute('name', name);
	  res.json('success');

	  // if (ingredient.custom){
			// ingredient.updateAttribute('name', name);
			// res.json('success');
	  // }

	  // let response
	  // try {
	  // 	response = await Ingredient.create({
	  // 		name: name,
	  // 		departmentId: departmentId,
	  // 		custom: true,
	  // 	});
	  // 	console.log(response);
	  // } catch (e) {
	  //    Raven.captureException(e);
	  //   //this will eventually be handled by your error handling middleware
	  //   next(e)
	  // }
	  // console.log(request);


	  // AS this code below in not worked, I copy paste code from other routers.

	  // console.log(req.headers.host)
	 //  request.post({
		//     url: req.headers.host + '/create/ing/',
		//     body: req.body,
		//     json: true
		// }, function(err, response, body){
		//     console.log(body);console.log('error:', err); // Print the error if one occurred
  // console.log('statusCode:', response && response.statusCode); // Print the response status code if a response was received
  // console.log('body:', body); // Print the HTML for the Google homepage.
		// })

	  // 1. as this is not a custom ingredient,
	  // we need to create a new ingredient with a new name
	  // 2. remove previous ingredient from GL
	  // 3. add a new ingredient
		// res.json('success');
		// Ingredient.findById(ingredientId, function(err, model){


		// 	model.updateAttribute('name', name);

		// 	res.json('success');
		// });
	});



// :todo this must be a remote method
	// Ing create. Not working with not advanced forms
	router.post('/create/ing/', function(req, res, next){
		var Ingredient   = app.models.Ingredient;
		var Grocery      = app.models.Grocery;

		var departmentId = req.body.departmentId;
		var name         = req.body.name;
		var groceryId    = req.body.groceryId;



		Ingredient.create(object, function(err, model){


			Grocery.addIngredient(options);
			// res.json('success');
			res.json({ id: model.id });
			// res.redirect('/department/' + departmentId + '/' + groceryId); // :todo update this
		});


	});


	// router.post('/delete/ingredients/:ingredients', function(req, res, next){

	// })


	    // [
      //   {"title":"123", "completed":false, "departmentId": "0"},
      //   {"title":"333", "completed":false, "departmentId": "0"},
      //   {"title":"Ingredos", "completed":false, "departmentId": "0"}
      // ]

  // :todo think about making this post instead of get
 //  	router.get('/getingredients/:groceryId/:departmentId/',
	// 	ensureLoggedIn('/auth/account'),  // :todo get back this
	// 	function(req, res, next){
	// 	var Grocery      = app.models.Grocery;
	// 	// var userId    = req.user.id;
	// 	var groceryId    = req.params.groceryId;
	// 	var departmentId = req.params.departmentId;



	// });



	app.use(router);
};
